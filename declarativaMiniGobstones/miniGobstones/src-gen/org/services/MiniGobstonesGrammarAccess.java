/*
* generated by Xtext
*/
package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MiniGobstonesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainProcedureParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Model:
		//	main=Procedure;
		public ParserRule getRule() { return rule; }

		//main=Procedure
		public Assignment getMainAssignment() { return cMainAssignment; }

		//Procedure
		public RuleCall getMainProcedureParserRuleCall_0() { return cMainProcedureParserRuleCall_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Procedure:
		//	"procedure" name=ID "{" commands+=Command* "}";
		public ParserRule getRule() { return rule; }

		//"procedure" name=ID "{" commands+=Command* "}"
		public Group getGroup() { return cGroup; }

		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//commands+=Command*
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPonerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoverParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//	Poner | Mover;
		public ParserRule getRule() { return rule; }

		//Poner | Mover
		public Alternatives getAlternatives() { return cAlternatives; }

		//Poner
		public RuleCall getPonerParserRuleCall_0() { return cPonerParserRuleCall_0; }

		//Mover
		public RuleCall getMoverParserRuleCall_1() { return cMoverParserRuleCall_1; }
	}

	public class PonerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Poner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPonerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPonerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColorColorEnumRuleCall_3_0 = (RuleCall)cColorAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Poner:
		//	{Poner} "Poner" "(" color=Color ")";
		public ParserRule getRule() { return rule; }

		//{Poner} "Poner" "(" color=Color ")"
		public Group getGroup() { return cGroup; }

		//{Poner}
		public Action getPonerAction_0() { return cPonerAction_0; }

		//"Poner"
		public Keyword getPonerKeyword_1() { return cPonerKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//color=Color
		public Assignment getColorAssignment_3() { return cColorAssignment_3; }

		//Color
		public RuleCall getColorColorEnumRuleCall_3_0() { return cColorColorEnumRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MoverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mover");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoverAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirDireccionEnumRuleCall_3_0 = (RuleCall)cDirAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mover:
		//	{Mover} "Mover" "(" dir=Direccion ")";
		public ParserRule getRule() { return rule; }

		//{Mover} "Mover" "(" dir=Direccion ")"
		public Group getGroup() { return cGroup; }

		//{Mover}
		public Action getMoverAction_0() { return cMoverAction_0; }

		//"Mover"
		public Keyword getMoverKeyword_1() { return cMoverKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//dir=Direccion
		public Assignment getDirAssignment_3() { return cDirAssignment_3; }

		//Direccion
		public RuleCall getDirDireccionEnumRuleCall_3_0() { return cDirDireccionEnumRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVerdeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVerdeVerdeKeyword_0_0 = (Keyword)cVerdeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRojoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRojoRojoKeyword_1_0 = (Keyword)cRojoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAzulEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAzulAzulKeyword_2_0 = (Keyword)cAzulEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNegroEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNegroNegroKeyword_3_0 = (Keyword)cNegroEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Color:
		//	Verde | Rojo | Azul | Negro;
		public EnumRule getRule() { return rule; }

		//Verde | Rojo | Azul | Negro
		public Alternatives getAlternatives() { return cAlternatives; }

		//Verde
		public EnumLiteralDeclaration getVerdeEnumLiteralDeclaration_0() { return cVerdeEnumLiteralDeclaration_0; }

		//"Verde"
		public Keyword getVerdeVerdeKeyword_0_0() { return cVerdeVerdeKeyword_0_0; }

		//Rojo
		public EnumLiteralDeclaration getRojoEnumLiteralDeclaration_1() { return cRojoEnumLiteralDeclaration_1; }

		//"Rojo"
		public Keyword getRojoRojoKeyword_1_0() { return cRojoRojoKeyword_1_0; }

		//Azul
		public EnumLiteralDeclaration getAzulEnumLiteralDeclaration_2() { return cAzulEnumLiteralDeclaration_2; }

		//"Azul"
		public Keyword getAzulAzulKeyword_2_0() { return cAzulAzulKeyword_2_0; }

		//Negro
		public EnumLiteralDeclaration getNegroEnumLiteralDeclaration_3() { return cNegroEnumLiteralDeclaration_3; }

		//"Negro"
		public Keyword getNegroNegroKeyword_3_0() { return cNegroNegroKeyword_3_0; }
	}

	public class DireccionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Direccion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNorteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNorteNorteKeyword_0_0 = (Keyword)cNorteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSurEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSurSurKeyword_1_0 = (Keyword)cSurEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEsteEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEsteEsteKeyword_2_0 = (Keyword)cEsteEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOesteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOesteOesteKeyword_3_0 = (Keyword)cOesteEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Direccion:
		//	Norte | Sur | Este | Oeste;
		public EnumRule getRule() { return rule; }

		//Norte | Sur | Este | Oeste
		public Alternatives getAlternatives() { return cAlternatives; }

		//Norte
		public EnumLiteralDeclaration getNorteEnumLiteralDeclaration_0() { return cNorteEnumLiteralDeclaration_0; }

		//"Norte"
		public Keyword getNorteNorteKeyword_0_0() { return cNorteNorteKeyword_0_0; }

		//Sur
		public EnumLiteralDeclaration getSurEnumLiteralDeclaration_1() { return cSurEnumLiteralDeclaration_1; }

		//"Sur"
		public Keyword getSurSurKeyword_1_0() { return cSurSurKeyword_1_0; }

		//Este
		public EnumLiteralDeclaration getEsteEnumLiteralDeclaration_2() { return cEsteEnumLiteralDeclaration_2; }

		//"Este"
		public Keyword getEsteEsteKeyword_2_0() { return cEsteEsteKeyword_2_0; }

		//Oeste
		public EnumLiteralDeclaration getOesteEnumLiteralDeclaration_3() { return cOesteEnumLiteralDeclaration_3; }

		//"Oeste"
		public Keyword getOesteOesteKeyword_3_0() { return cOesteOesteKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private ProcedureElements pProcedure;
	private CommandElements pCommand;
	private PonerElements pPoner;
	private ColorElements unknownRuleColor;
	private MoverElements pMover;
	private DireccionElements unknownRuleDireccion;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniGobstonesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.MiniGobstones".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	main=Procedure;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Procedure:
	//	"procedure" name=ID "{" commands+=Command* "}";
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//Command:
	//	Poner | Mover;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Poner:
	//	{Poner} "Poner" "(" color=Color ")";
	public PonerElements getPonerAccess() {
		return (pPoner != null) ? pPoner : (pPoner = new PonerElements());
	}
	
	public ParserRule getPonerRule() {
		return getPonerAccess().getRule();
	}

	//enum Color:
	//	Verde | Rojo | Azul | Negro;
	public ColorElements getColorAccess() {
		return (unknownRuleColor != null) ? unknownRuleColor : (unknownRuleColor = new ColorElements());
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}

	//Mover:
	//	{Mover} "Mover" "(" dir=Direccion ")";
	public MoverElements getMoverAccess() {
		return (pMover != null) ? pMover : (pMover = new MoverElements());
	}
	
	public ParserRule getMoverRule() {
		return getMoverAccess().getRule();
	}

	//enum Direccion:
	//	Norte | Sur | Este | Oeste;
	public DireccionElements getDireccionAccess() {
		return (unknownRuleDireccion != null) ? unknownRuleDireccion : (unknownRuleDireccion = new DireccionElements());
	}
	
	public EnumRule getDireccionRule() {
		return getDireccionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
