/*
* generated by Xtext
*/
package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MiniGobstonesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainProcedureParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Model:
		//	main=Procedure;
		public ParserRule getRule() { return rule; }

		//main=Procedure
		public Assignment getMainAssignment() { return cMainAssignment; }

		//Procedure
		public RuleCall getMainProcedureParserRuleCall_0() { return cMainProcedureParserRuleCall_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cLBRACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Procedure:
		//	"procedure" name=ID LBRACE commands+=Command* RBRACE;
		public ParserRule getRule() { return rule; }

		//"procedure" name=ID LBRACE commands+=Command* RBRACE
		public Group getGroup() { return cGroup; }

		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_2() { return cLBRACETerminalRuleCall_2; }

		//commands+=Command*
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_4() { return cRBRACETerminalRuleCall_4; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPonerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoverParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPonerNParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMoverNParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHayBolitasParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPuedeMoverParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Command:
		//	Poner | Mover | PonerN | MoverN | HayBolitas | PuedeMover | If;
		public ParserRule getRule() { return rule; }

		//Poner | Mover | PonerN | MoverN | HayBolitas | PuedeMover | If
		public Alternatives getAlternatives() { return cAlternatives; }

		//Poner
		public RuleCall getPonerParserRuleCall_0() { return cPonerParserRuleCall_0; }

		//Mover
		public RuleCall getMoverParserRuleCall_1() { return cMoverParserRuleCall_1; }

		//PonerN
		public RuleCall getPonerNParserRuleCall_2() { return cPonerNParserRuleCall_2; }

		//MoverN
		public RuleCall getMoverNParserRuleCall_3() { return cMoverNParserRuleCall_3; }

		//HayBolitas
		public RuleCall getHayBolitasParserRuleCall_4() { return cHayBolitasParserRuleCall_4; }

		//PuedeMover
		public RuleCall getPuedeMoverParserRuleCall_5() { return cPuedeMoverParserRuleCall_5; }

		//If
		public RuleCall getIfParserRuleCall_6() { return cIfParserRuleCall_6; }
	}

	public class PonerNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PonerN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPonerNAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPonerNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIntAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntINTTerminalRuleCall_3_0 = (RuleCall)cIntAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColorColorEnumRuleCall_5_0 = (RuleCall)cColorAssignment_5.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//PonerN:
		//	{PonerN} "PonerN" LPAR int=INT "," color=Color RPAR;
		public ParserRule getRule() { return rule; }

		//{PonerN} "PonerN" LPAR int=INT "," color=Color RPAR
		public Group getGroup() { return cGroup; }

		//{PonerN}
		public Action getPonerNAction_0() { return cPonerNAction_0; }

		//"PonerN"
		public Keyword getPonerNKeyword_1() { return cPonerNKeyword_1; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }

		//int=INT
		public Assignment getIntAssignment_3() { return cIntAssignment_3; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_3_0() { return cIntINTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//color=Color
		public Assignment getColorAssignment_5() { return cColorAssignment_5; }

		//Color
		public RuleCall getColorColorEnumRuleCall_5_0() { return cColorColorEnumRuleCall_5_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_6() { return cRPARTerminalRuleCall_6; }
	}

	public class MoverNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MoverN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoverNAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoverNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIntAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntINTTerminalRuleCall_3_0 = (RuleCall)cIntAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDirAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDirDireccionEnumRuleCall_5_0 = (RuleCall)cDirAssignment_5.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//MoverN:
		//	{MoverN} "MoverN" LPAR int=INT "," dir=Direccion RPAR;
		public ParserRule getRule() { return rule; }

		//{MoverN} "MoverN" LPAR int=INT "," dir=Direccion RPAR
		public Group getGroup() { return cGroup; }

		//{MoverN}
		public Action getMoverNAction_0() { return cMoverNAction_0; }

		//"MoverN"
		public Keyword getMoverNKeyword_1() { return cMoverNKeyword_1; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }

		//int=INT
		public Assignment getIntAssignment_3() { return cIntAssignment_3; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_3_0() { return cIntINTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//dir=Direccion
		public Assignment getDirAssignment_5() { return cDirAssignment_5; }

		//Direccion
		public RuleCall getDirDireccionEnumRuleCall_5_0() { return cDirDireccionEnumRuleCall_5_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_6() { return cRPARTerminalRuleCall_6; }
	}

	public class PonerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Poner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPonerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPonerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColorColorEnumRuleCall_3_0 = (RuleCall)cColorAssignment_3.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Poner:
		//	{Poner} "Poner" LPAR color=Color RPAR;
		public ParserRule getRule() { return rule; }

		//{Poner} "Poner" LPAR color=Color RPAR
		public Group getGroup() { return cGroup; }

		//{Poner}
		public Action getPonerAction_0() { return cPonerAction_0; }

		//"Poner"
		public Keyword getPonerKeyword_1() { return cPonerKeyword_1; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }

		//color=Color
		public Assignment getColorAssignment_3() { return cColorAssignment_3; }

		//Color
		public RuleCall getColorColorEnumRuleCall_3_0() { return cColorColorEnumRuleCall_3_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_4() { return cRPARTerminalRuleCall_4; }
	}

	public class MoverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mover");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoverAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cDirAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirDireccionEnumRuleCall_3_0 = (RuleCall)cDirAssignment_3.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Mover:
		//	{Mover} "Mover" LPAR dir=Direccion RPAR;
		public ParserRule getRule() { return rule; }

		//{Mover} "Mover" LPAR dir=Direccion RPAR
		public Group getGroup() { return cGroup; }

		//{Mover}
		public Action getMoverAction_0() { return cMoverAction_0; }

		//"Mover"
		public Keyword getMoverKeyword_1() { return cMoverKeyword_1; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }

		//dir=Direccion
		public Assignment getDirAssignment_3() { return cDirAssignment_3; }

		//Direccion
		public RuleCall getDirDireccionEnumRuleCall_3_0() { return cDirDireccionEnumRuleCall_3_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_4() { return cRPARTerminalRuleCall_4; }
	}

	public class HayBolitasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HayBolitas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHayBolitasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorEnumRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HayBolitas:
		//	"hayBolitas" LPAR color=Color RPAR;
		public ParserRule getRule() { return rule; }

		//"hayBolitas" LPAR color=Color RPAR
		public Group getGroup() { return cGroup; }

		//"hayBolitas"
		public Keyword getHayBolitasKeyword_0() { return cHayBolitasKeyword_0; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_1() { return cLPARTerminalRuleCall_1; }

		//color=Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorEnumRuleCall_2_0() { return cColorColorEnumRuleCall_2_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_3() { return cRPARTerminalRuleCall_3; }
	}

	public class PuedeMoverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PuedeMover");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPuedeMoverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDirAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirDireccionEnumRuleCall_2_0 = (RuleCall)cDirAssignment_2.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PuedeMover:
		//	"puedeMover" LPAR dir=Direccion RPAR;
		public ParserRule getRule() { return rule; }

		//"puedeMover" LPAR dir=Direccion RPAR
		public Group getGroup() { return cGroup; }

		//"puedeMover"
		public Keyword getPuedeMoverKeyword_0() { return cPuedeMoverKeyword_0; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_1() { return cLPARTerminalRuleCall_1; }

		//dir=Direccion
		public Assignment getDirAssignment_2() { return cDirAssignment_2; }

		//Direccion
		public RuleCall getDirDireccionEnumRuleCall_2_0() { return cDirDireccionEnumRuleCall_2_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_3() { return cRPARTerminalRuleCall_3; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprBooleansParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cLBRACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCommandsThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommandsThenCommandParserRuleCall_6_0 = (RuleCall)cCommandsThenAssignment_6.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cLBRACETerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cCommandsElseAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cCommandsElseCommandParserRuleCall_8_2_0 = (RuleCall)cCommandsElseAssignment_8_2.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		
		//If:
		//	{If} "if" LPAR expr=Booleans RPAR LBRACE commandsThen+=Command+ RBRACE ("else" LBRACE commandsElse+=Command+ RBRACE)?;
		public ParserRule getRule() { return rule; }

		//{If} "if" LPAR expr=Booleans RPAR LBRACE commandsThen+=Command+ RBRACE ("else" LBRACE commandsElse+=Command+ RBRACE)?
		public Group getGroup() { return cGroup; }

		//{If}
		public Action getIfAction_0() { return cIfAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }

		//expr=Booleans
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Booleans
		public RuleCall getExprBooleansParserRuleCall_3_0() { return cExprBooleansParserRuleCall_3_0; }

		//RPAR
		public RuleCall getRPARTerminalRuleCall_4() { return cRPARTerminalRuleCall_4; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_5() { return cLBRACETerminalRuleCall_5; }

		//commandsThen+=Command+
		public Assignment getCommandsThenAssignment_6() { return cCommandsThenAssignment_6; }

		//Command
		public RuleCall getCommandsThenCommandParserRuleCall_6_0() { return cCommandsThenCommandParserRuleCall_6_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_7() { return cRBRACETerminalRuleCall_7; }

		//("else" LBRACE commandsElse+=Command+ RBRACE)?
		public Group getGroup_8() { return cGroup_8; }

		//"else"
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_8_1() { return cLBRACETerminalRuleCall_8_1; }

		//commandsElse+=Command+
		public Assignment getCommandsElseAssignment_8_2() { return cCommandsElseAssignment_8_2; }

		//Command
		public RuleCall getCommandsElseCommandParserRuleCall_8_2_0() { return cCommandsElseCommandParserRuleCall_8_2_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_8_3() { return cRBRACETerminalRuleCall_8_3; }
	}

	public class BooleansElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Booleans");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHayBolitasParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPuedeMoverParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Booleans:
		//	HayBolitas | PuedeMover;
		public ParserRule getRule() { return rule; }

		//HayBolitas | PuedeMover
		public Alternatives getAlternatives() { return cAlternatives; }

		//HayBolitas
		public RuleCall getHayBolitasParserRuleCall_0() { return cHayBolitasParserRuleCall_0; }

		//PuedeMover
		public RuleCall getPuedeMoverParserRuleCall_1() { return cPuedeMoverParserRuleCall_1; }
	}
	
	
	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVerdeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVerdeVerdeKeyword_0_0 = (Keyword)cVerdeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRojoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRojoRojoKeyword_1_0 = (Keyword)cRojoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAzulEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAzulAzulKeyword_2_0 = (Keyword)cAzulEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNegroEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNegroNegroKeyword_3_0 = (Keyword)cNegroEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Color:
		//	Verde | Rojo | Azul | Negro;
		public EnumRule getRule() { return rule; }

		//Verde | Rojo | Azul | Negro
		public Alternatives getAlternatives() { return cAlternatives; }

		//Verde
		public EnumLiteralDeclaration getVerdeEnumLiteralDeclaration_0() { return cVerdeEnumLiteralDeclaration_0; }

		//"Verde"
		public Keyword getVerdeVerdeKeyword_0_0() { return cVerdeVerdeKeyword_0_0; }

		//Rojo
		public EnumLiteralDeclaration getRojoEnumLiteralDeclaration_1() { return cRojoEnumLiteralDeclaration_1; }

		//"Rojo"
		public Keyword getRojoRojoKeyword_1_0() { return cRojoRojoKeyword_1_0; }

		//Azul
		public EnumLiteralDeclaration getAzulEnumLiteralDeclaration_2() { return cAzulEnumLiteralDeclaration_2; }

		//"Azul"
		public Keyword getAzulAzulKeyword_2_0() { return cAzulAzulKeyword_2_0; }

		//Negro
		public EnumLiteralDeclaration getNegroEnumLiteralDeclaration_3() { return cNegroEnumLiteralDeclaration_3; }

		//"Negro"
		public Keyword getNegroNegroKeyword_3_0() { return cNegroNegroKeyword_3_0; }
	}

	public class DireccionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Direccion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNorteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNorteNorteKeyword_0_0 = (Keyword)cNorteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSurEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSurSurKeyword_1_0 = (Keyword)cSurEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEsteEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEsteEsteKeyword_2_0 = (Keyword)cEsteEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOesteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOesteOesteKeyword_3_0 = (Keyword)cOesteEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Direccion:
		//	Norte | Sur | Este | Oeste;
		public EnumRule getRule() { return rule; }

		//Norte | Sur | Este | Oeste
		public Alternatives getAlternatives() { return cAlternatives; }

		//Norte
		public EnumLiteralDeclaration getNorteEnumLiteralDeclaration_0() { return cNorteEnumLiteralDeclaration_0; }

		//"Norte"
		public Keyword getNorteNorteKeyword_0_0() { return cNorteNorteKeyword_0_0; }

		//Sur
		public EnumLiteralDeclaration getSurEnumLiteralDeclaration_1() { return cSurEnumLiteralDeclaration_1; }

		//"Sur"
		public Keyword getSurSurKeyword_1_0() { return cSurSurKeyword_1_0; }

		//Este
		public EnumLiteralDeclaration getEsteEnumLiteralDeclaration_2() { return cEsteEnumLiteralDeclaration_2; }

		//"Este"
		public Keyword getEsteEsteKeyword_2_0() { return cEsteEsteKeyword_2_0; }

		//Oeste
		public EnumLiteralDeclaration getOesteEnumLiteralDeclaration_3() { return cOesteEnumLiteralDeclaration_3; }

		//"Oeste"
		public Keyword getOesteOesteKeyword_3_0() { return cOesteOesteKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private ProcedureElements pProcedure;
	private CommandElements pCommand;
	private PonerNElements pPonerN;
	private MoverNElements pMoverN;
	private PonerElements pPoner;
	private ColorElements unknownRuleColor;
	private MoverElements pMover;
	private DireccionElements unknownRuleDireccion;
	private HayBolitasElements pHayBolitas;
	private PuedeMoverElements pPuedeMover;
	private IfElements pIf;
	private BooleansElements pBooleans;
	private TerminalRule tLPAR;
	private TerminalRule tRPAR;
	private TerminalRule tLBRACE;
	private TerminalRule tRBRACE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniGobstonesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.MiniGobstones".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	main=Procedure;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Procedure:
	//	"procedure" name=ID LBRACE commands+=Command* RBRACE;
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//Command:
	//	Poner | Mover | PonerN | MoverN | HayBolitas | PuedeMover | If;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//PonerN:
	//	{PonerN} "PonerN" LPAR int=INT "," color=Color RPAR;
	public PonerNElements getPonerNAccess() {
		return (pPonerN != null) ? pPonerN : (pPonerN = new PonerNElements());
	}
	
	public ParserRule getPonerNRule() {
		return getPonerNAccess().getRule();
	}

	//MoverN:
	//	{MoverN} "MoverN" LPAR int=INT "," dir=Direccion RPAR;
	public MoverNElements getMoverNAccess() {
		return (pMoverN != null) ? pMoverN : (pMoverN = new MoverNElements());
	}
	
	public ParserRule getMoverNRule() {
		return getMoverNAccess().getRule();
	}

	//Poner:
	//	{Poner} "Poner" LPAR color=Color RPAR;
	public PonerElements getPonerAccess() {
		return (pPoner != null) ? pPoner : (pPoner = new PonerElements());
	}
	
	public ParserRule getPonerRule() {
		return getPonerAccess().getRule();
	}

	//enum Color:
	//	Verde | Rojo | Azul | Negro;
	public ColorElements getColorAccess() {
		return (unknownRuleColor != null) ? unknownRuleColor : (unknownRuleColor = new ColorElements());
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}

	//Mover:
	//	{Mover} "Mover" LPAR dir=Direccion RPAR;
	public MoverElements getMoverAccess() {
		return (pMover != null) ? pMover : (pMover = new MoverElements());
	}
	
	public ParserRule getMoverRule() {
		return getMoverAccess().getRule();
	}

	//enum Direccion:
	//	Norte | Sur | Este | Oeste;
	public DireccionElements getDireccionAccess() {
		return (unknownRuleDireccion != null) ? unknownRuleDireccion : (unknownRuleDireccion = new DireccionElements());
	}
	
	public EnumRule getDireccionRule() {
		return getDireccionAccess().getRule();
	}

	//HayBolitas:
	//	"hayBolitas" LPAR color=Color RPAR;
	public HayBolitasElements getHayBolitasAccess() {
		return (pHayBolitas != null) ? pHayBolitas : (pHayBolitas = new HayBolitasElements());
	}
	
	public ParserRule getHayBolitasRule() {
		return getHayBolitasAccess().getRule();
	}

	//PuedeMover:
	//	"puedeMover" LPAR dir=Direccion RPAR;
	public PuedeMoverElements getPuedeMoverAccess() {
		return (pPuedeMover != null) ? pPuedeMover : (pPuedeMover = new PuedeMoverElements());
	}
	
	public ParserRule getPuedeMoverRule() {
		return getPuedeMoverAccess().getRule();
	}

	//If:
	//	{If} "if" LPAR expr=Booleans RPAR LBRACE commandsThen+=Command+ RBRACE ("else" LBRACE commandsElse+=Command+ RBRACE)?;
	public IfElements getIfAccess() {
		return (pIf != null) ? pIf : (pIf = new IfElements());
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Booleans:
	//	HayBolitas | PuedeMover;
	public BooleansElements getBooleansAccess() {
		return (pBooleans != null) ? pBooleans : (pBooleans = new BooleansElements());
	}
	
	public ParserRule getBooleansRule() {
		return getBooleansAccess().getRule();
	}

	//terminal LPAR:
	//	"(";
	public TerminalRule getLPARRule() {
		return (tLPAR != null) ? tLPAR : (tLPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAR"));
	} 

	//terminal RPAR:
	//	")";
	public TerminalRule getRPARRule() {
		return (tRPAR != null) ? tRPAR : (tRPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAR"));
	} 

	//terminal LBRACE:
	//	"{";
	public TerminalRule getLBRACERule() {
		return (tLBRACE != null) ? tLBRACE : (tLBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACE"));
	} 

	//terminal RBRACE:
	//	"}";
	public TerminalRule getRBRACERule() {
		return (tRBRACE != null) ? tRBRACE : (tRBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
