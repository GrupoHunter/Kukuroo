/*
* generated by Xtext
*/
grammar InternalMiniGobstones;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.services.MiniGobstonesGrammarAccess;

}

@parser::members {

 	private MiniGobstonesGrammarAccess grammarAccess;
 	
    public InternalMiniGobstonesParser(TokenStream input, MiniGobstonesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MiniGobstonesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getMainProcedureParserRuleCall_0()); 
	    }
		lv_main_0_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"main",
        		lv_main_0_0, 
        		"Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='procedure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getProcedureKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)this_LBRACE_2=RULE_LBRACE
    { 
    newLeafNode(this_LBRACE_2, grammarAccess.getProcedureAccess().getLBRACETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getCommandsCommandParserRuleCall_3_0()); 
	    }
		lv_commands_3_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_3_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_RBRACE_4=RULE_RBRACE
    { 
    newLeafNode(this_RBRACE_4, grammarAccess.getProcedureAccess().getRBRACETerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getPonerParserRuleCall_0()); 
    }
    this_Poner_0=rulePoner
    { 
        $current = $this_Poner_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMoverParserRuleCall_1()); 
    }
    this_Mover_1=ruleMover
    { 
        $current = $this_Mover_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getPonerNParserRuleCall_2()); 
    }
    this_PonerN_2=rulePonerN
    { 
        $current = $this_PonerN_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMoverNParserRuleCall_3()); 
    }
    this_MoverN_3=ruleMoverN
    { 
        $current = $this_MoverN_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getHayBolitasParserRuleCall_4()); 
    }
    this_HayBolitas_4=ruleHayBolitas
    { 
        $current = $this_HayBolitas_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getPuedeMoverParserRuleCall_5()); 
    }
    this_PuedeMover_5=rulePuedeMover
    { 
        $current = $this_PuedeMover_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getIfParserRuleCall_6()); 
    }
    this_If_6=ruleIf
    { 
        $current = $this_If_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getWhileParserRuleCall_7()); 
    }
    this_While_7=ruleWhile
    { 
        $current = $this_While_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getForParserRuleCall_8()); 
    }
    this_For_8=ruleFor
    { 
        $current = $this_For_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getVariableParserRuleCall_9()); 
    }
    this_Variable_9=ruleVariable
    { 
        $current = $this_Variable_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePonerN
entryRulePonerN returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPonerNRule()); }
	 iv_rulePonerN=rulePonerN 
	 { $current=$iv_rulePonerN.current; } 
	 EOF 
;

// Rule PonerN
rulePonerN returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPonerNAccess().getPonerNAction_0(),
            $current);
    }
)	otherlv_1='PonerN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPonerNAccess().getPonerNKeyword_1());
    }
this_LPAR_2=RULE_LPAR
    { 
    newLeafNode(this_LPAR_2, grammarAccess.getPonerNAccess().getLPARTerminalRuleCall_2()); 
    }
(
(
		lv_int_3_0=RULE_INT
		{
			newLeafNode(lv_int_3_0, grammarAccess.getPonerNAccess().getIntINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPonerNRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_3_0, 
        		"INT");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPonerNAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPonerNAccess().getColorColorEnumRuleCall_5_0()); 
	    }
		lv_color_5_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPonerNRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_5_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_6=RULE_RPAR
    { 
    newLeafNode(this_RPAR_6, grammarAccess.getPonerNAccess().getRPARTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleMoverN
entryRuleMoverN returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoverNRule()); }
	 iv_ruleMoverN=ruleMoverN 
	 { $current=$iv_ruleMoverN.current; } 
	 EOF 
;

// Rule MoverN
ruleMoverN returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMoverNAccess().getMoverNAction_0(),
            $current);
    }
)	otherlv_1='MoverN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMoverNAccess().getMoverNKeyword_1());
    }
this_LPAR_2=RULE_LPAR
    { 
    newLeafNode(this_LPAR_2, grammarAccess.getMoverNAccess().getLPARTerminalRuleCall_2()); 
    }
(
(
		lv_int_3_0=RULE_INT
		{
			newLeafNode(lv_int_3_0, grammarAccess.getMoverNAccess().getIntINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMoverNRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_3_0, 
        		"INT");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMoverNAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMoverNAccess().getDirDireccionEnumRuleCall_5_0()); 
	    }
		lv_dir_5_0=ruleDireccion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoverNRule());
	        }
       		set(
       			$current, 
       			"dir",
        		lv_dir_5_0, 
        		"Direccion");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_6=RULE_RPAR
    { 
    newLeafNode(this_RPAR_6, grammarAccess.getMoverNAccess().getRPARTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRulePoner
entryRulePoner returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPonerRule()); }
	 iv_rulePoner=rulePoner 
	 { $current=$iv_rulePoner.current; } 
	 EOF 
;

// Rule Poner
rulePoner returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPonerAccess().getPonerAction_0(),
            $current);
    }
)	otherlv_1='Poner' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPonerAccess().getPonerKeyword_1());
    }
this_LPAR_2=RULE_LPAR
    { 
    newLeafNode(this_LPAR_2, grammarAccess.getPonerAccess().getLPARTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPonerAccess().getColorColorEnumRuleCall_3_0()); 
	    }
		lv_color_3_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPonerRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_3_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_4=RULE_RPAR
    { 
    newLeafNode(this_RPAR_4, grammarAccess.getPonerAccess().getRPARTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleMover
entryRuleMover returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoverRule()); }
	 iv_ruleMover=ruleMover 
	 { $current=$iv_ruleMover.current; } 
	 EOF 
;

// Rule Mover
ruleMover returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMoverAccess().getMoverAction_0(),
            $current);
    }
)	otherlv_1='Mover' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMoverAccess().getMoverKeyword_1());
    }
this_LPAR_2=RULE_LPAR
    { 
    newLeafNode(this_LPAR_2, grammarAccess.getMoverAccess().getLPARTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMoverAccess().getDirDireccionEnumRuleCall_3_0()); 
	    }
		lv_dir_3_0=ruleDireccion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoverRule());
	        }
       		set(
       			$current, 
       			"dir",
        		lv_dir_3_0, 
        		"Direccion");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_4=RULE_RPAR
    { 
    newLeafNode(this_RPAR_4, grammarAccess.getMoverAccess().getRPARTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleHayBolitas
entryRuleHayBolitas returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHayBolitasRule()); }
	 iv_ruleHayBolitas=ruleHayBolitas 
	 { $current=$iv_ruleHayBolitas.current; } 
	 EOF 
;

// Rule HayBolitas
ruleHayBolitas returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='hayBolitas' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHayBolitasAccess().getHayBolitasKeyword_0());
    }
this_LPAR_1=RULE_LPAR
    { 
    newLeafNode(this_LPAR_1, grammarAccess.getHayBolitasAccess().getLPARTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHayBolitasAccess().getColorColorEnumRuleCall_2_0()); 
	    }
		lv_color_2_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHayBolitasRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_2_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_3=RULE_RPAR
    { 
    newLeafNode(this_RPAR_3, grammarAccess.getHayBolitasAccess().getRPARTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRulePuedeMover
entryRulePuedeMover returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPuedeMoverRule()); }
	 iv_rulePuedeMover=rulePuedeMover 
	 { $current=$iv_rulePuedeMover.current; } 
	 EOF 
;

// Rule PuedeMover
rulePuedeMover returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='puedeMover' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPuedeMoverAccess().getPuedeMoverKeyword_0());
    }
this_LPAR_1=RULE_LPAR
    { 
    newLeafNode(this_LPAR_1, grammarAccess.getPuedeMoverAccess().getLPARTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPuedeMoverAccess().getDirDireccionEnumRuleCall_2_0()); 
	    }
		lv_dir_2_0=ruleDireccion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPuedeMoverRule());
	        }
       		set(
       			$current, 
       			"dir",
        		lv_dir_2_0, 
        		"Direccion");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_3=RULE_RPAR
    { 
    newLeafNode(this_RPAR_3, grammarAccess.getPuedeMoverAccess().getRPARTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableAccess().getVariableAction_0_0(),
            $current);
    }
)	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getVarKeyword_0_1());
    }
(
(
		lv_varName_2_0=RULE_ID
		{
			newLeafNode(lv_varName_2_0, grammarAccess.getVariableAccess().getVarNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getEqualsSignKeyword_0_3());
    }
this_INT_4=RULE_INT
    { 
    newLeafNode(this_INT_4, grammarAccess.getVariableAccess().getINTTerminalRuleCall_0_4()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getBooleansParserRuleCall_1()); 
    }
    this_Booleans_5=ruleBooleans
    { 
        $current = $this_Booleans_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_6=ruleExpression
    { 
        $current = $this_Expression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getWhileAccess().getWhileAction_0(),
            $current);
    }
)	otherlv_1='While' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getWhileKeyword_1());
    }
this_LPAR_2=RULE_LPAR
    { 
    newLeafNode(this_LPAR_2, grammarAccess.getWhileAccess().getLPARTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getExprExpressionParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_4=RULE_RPAR
    { 
    newLeafNode(this_RPAR_4, grammarAccess.getWhileAccess().getRPARTerminalRuleCall_4()); 
    }
this_LBRACE_5=RULE_LBRACE
    { 
    newLeafNode(this_LBRACE_5, grammarAccess.getWhileAccess().getLBRACETerminalRuleCall_5()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getCommandsCommandParserRuleCall_6_0()); 
	    }
		lv_commands_6_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_6_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_RBRACE_7=RULE_RBRACE
    { 
    newLeafNode(this_RBRACE_7, grammarAccess.getWhileAccess().getRBRACETerminalRuleCall_7()); 
    }
)
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getForAccess().getForAction_0_0(),
            $current);
    }
)	otherlv_1='repeat' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForAccess().getRepeatKeyword_0_1());
    }
(
(
		lv_varName_2_0=RULE_ID
		{
			newLeafNode(lv_varName_2_0, grammarAccess.getForAccess().getVarNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varName",
        		lv_varName_2_0, 
        		"ID");
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForAccess().getInKeyword_0_3());
    }
this_INT_4=RULE_INT
    { 
    newLeafNode(this_INT_4, grammarAccess.getForAccess().getINTTerminalRuleCall_0_4()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getColorAColorEnumRuleCall_1_0_0()); 
	    }
		lv_colorA_5_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"colorA",
        		lv_colorA_5_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForAccess().getToKeyword_1_1());
    }
this_INT_7=RULE_INT
    { 
    newLeafNode(this_INT_7, grammarAccess.getForAccess().getINTTerminalRuleCall_1_2()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getColorBColorEnumRuleCall_2_0_0()); 
	    }
		lv_colorB_8_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"colorB",
        		lv_colorB_8_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LBRACE_9=RULE_LBRACE
    { 
    newLeafNode(this_LBRACE_9, grammarAccess.getForAccess().getLBRACETerminalRuleCall_2_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getCommandCommandParserRuleCall_2_2_0()); 
	    }
		lv_Command_10_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		add(
       			$current, 
       			"Command",
        		lv_Command_10_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_RBRACE_11=RULE_RBRACE
    { 
    newLeafNode(this_RBRACE_11, grammarAccess.getForAccess().getRBRACETerminalRuleCall_2_3()); 
    }
))
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfAccess().getIfAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfAccess().getIfKeyword_1());
    }
this_LPAR_2=RULE_LPAR
    { 
    newLeafNode(this_LPAR_2, grammarAccess.getIfAccess().getLPARTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getExprExpressionParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RPAR_4=RULE_RPAR
    { 
    newLeafNode(this_RPAR_4, grammarAccess.getIfAccess().getRPARTerminalRuleCall_4()); 
    }
this_LBRACE_5=RULE_LBRACE
    { 
    newLeafNode(this_LBRACE_5, grammarAccess.getIfAccess().getLBRACETerminalRuleCall_5()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getCommandsThenCommandParserRuleCall_6_0()); 
	    }
		lv_commandsThen_6_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		add(
       			$current, 
       			"commandsThen",
        		lv_commandsThen_6_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RBRACE_7=RULE_RBRACE
    { 
    newLeafNode(this_RBRACE_7, grammarAccess.getIfAccess().getRBRACETerminalRuleCall_7()); 
    }
(	otherlv_8='else' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfAccess().getElseKeyword_8_0());
    }
this_LBRACE_9=RULE_LBRACE
    { 
    newLeafNode(this_LBRACE_9, grammarAccess.getIfAccess().getLBRACETerminalRuleCall_8_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getCommandsElseCommandParserRuleCall_8_2_0()); 
	    }
		lv_commandsElse_10_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		add(
       			$current, 
       			"commandsElse",
        		lv_commandsElse_10_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RBRACE_11=RULE_RBRACE
    { 
    newLeafNode(this_RBRACE_11, grammarAccess.getIfAccess().getRBRACETerminalRuleCall_8_3()); 
    }
)?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionAccess().getOperatorAction_0(),
            $current);
    }
)(
(
		lv_opNot_1_0=	'!' 
    {
        newLeafNode(lv_opNot_1_0, grammarAccess.getExpressionAccess().getOpNotExclamationMarkKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "opNot", lv_opNot_1_0, "!");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLeftTerminalExpressionParserRuleCall_2_0()); 
	    }
		lv_left_2_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOpOperatorParserRuleCall_3_0_0()); 
	    }
		lv_op_3_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightTerminalExpressionParserRuleCall_3_1_0()); 
	    }
		lv_right_4_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_LPAR_0=RULE_LPAR
    { 
    newLeafNode(this_LPAR_0, grammarAccess.getTerminalExpressionAccess().getLPARTerminalRuleCall_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
this_RPAR_2=RULE_RPAR
    { 
    newLeafNode(this_RPAR_2, grammarAccess.getTerminalExpressionAccess().getRPARTerminalRuleCall_0_2()); 
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExprBooleansParserRuleCall_1_0()); 
	    }
		lv_expr_3_0=ruleBooleans		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Booleans");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBooleans
entryRuleBooleans returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleansRule()); }
	 iv_ruleBooleans=ruleBooleans 
	 { $current=$iv_ruleBooleans.current; } 
	 EOF 
;

// Rule Booleans
ruleBooleans returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleansAccess().getHayBolitasParserRuleCall_0()); 
    }
    this_HayBolitas_0=ruleHayBolitas
    { 
        $current = $this_HayBolitas_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBooleansAccess().getPuedeMoverParserRuleCall_1()); 
    }
    this_PuedeMover_1=rulePuedeMover
    { 
        $current = $this_PuedeMover_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current.getText(); }  
	 EOF 
;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getAndKeyword_0()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getOrKeyword_1()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignKeyword_3()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_5()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_6()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_7()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getPlusSignKeyword_8()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorAccess().getHyphenMinusKeyword_9()); 
    }
)
    ;





// Rule Color
ruleColor returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Verde' 
	{
        $current = grammarAccess.getColorAccess().getVerdeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getColorAccess().getVerdeEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Rojo' 
	{
        $current = grammarAccess.getColorAccess().getRojoEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getColorAccess().getRojoEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Azul' 
	{
        $current = grammarAccess.getColorAccess().getAzulEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getColorAccess().getAzulEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Negro' 
	{
        $current = grammarAccess.getColorAccess().getNegroEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getColorAccess().getNegroEnumLiteralDeclaration_3()); 
    }
));



// Rule Direccion
ruleDireccion returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Norte' 
	{
        $current = grammarAccess.getDireccionAccess().getNorteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDireccionAccess().getNorteEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Sur' 
	{
        $current = grammarAccess.getDireccionAccess().getSurEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDireccionAccess().getSurEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Este' 
	{
        $current = grammarAccess.getDireccionAccess().getEsteEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDireccionAccess().getEsteEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Oeste' 
	{
        $current = grammarAccess.getDireccionAccess().getOesteEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDireccionAccess().getOesteEnumLiteralDeclaration_3()); 
    }
));



RULE_LPAR : '(';

RULE_RPAR : ')';

RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


