/*
* generated by Xtext
*/
grammar InternalMiniGobstones;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.services.MiniGobstonesGrammarAccess;

}

@parser::members {
 
 	private MiniGobstonesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MiniGobstonesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getMainAssignment()); }
(rule__Model__MainAssignment)
{ after(grammarAccess.getModelAccess().getMainAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedure
entryRuleProcedure 
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureAccess().getGroup()); }
(rule__Procedure__Group__0)
{ after(grammarAccess.getProcedureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommand
entryRuleCommand 
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommandAccess().getAlternatives()); }
(rule__Command__Alternatives)
{ after(grammarAccess.getCommandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePoner
entryRulePoner 
:
{ before(grammarAccess.getPonerRule()); }
	 rulePoner
{ after(grammarAccess.getPonerRule()); } 
	 EOF 
;

// Rule Poner
rulePoner
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPonerAccess().getGroup()); }
(rule__Poner__Group__0)
{ after(grammarAccess.getPonerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMover
entryRuleMover 
:
{ before(grammarAccess.getMoverRule()); }
	 ruleMover
{ after(grammarAccess.getMoverRule()); } 
	 EOF 
;

// Rule Mover
ruleMover
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMoverAccess().getGroup()); }
(rule__Mover__Group__0)
{ after(grammarAccess.getMoverAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Color
ruleColor
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorAccess().getAlternatives()); }
(rule__Color__Alternatives)
{ after(grammarAccess.getColorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Direccion
ruleDireccion
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDireccionAccess().getAlternatives()); }
(rule__Direccion__Alternatives)
{ after(grammarAccess.getDireccionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Command__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommandAccess().getPonerParserRuleCall_0()); }
	rulePoner
{ after(grammarAccess.getCommandAccess().getPonerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCommandAccess().getMoverParserRuleCall_1()); }
	ruleMover
{ after(grammarAccess.getCommandAccess().getMoverParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColorAccess().getVerdeEnumLiteralDeclaration_0()); }
(	'Verde' 
)
{ after(grammarAccess.getColorAccess().getVerdeEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getColorAccess().getRojoEnumLiteralDeclaration_1()); }
(	'Rojo' 
)
{ after(grammarAccess.getColorAccess().getRojoEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getColorAccess().getAzulEnumLiteralDeclaration_2()); }
(	'Azul' 
)
{ after(grammarAccess.getColorAccess().getAzulEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getColorAccess().getNegroEnumLiteralDeclaration_3()); }
(	'Negro' 
)
{ after(grammarAccess.getColorAccess().getNegroEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Direccion__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDireccionAccess().getNorteEnumLiteralDeclaration_0()); }
(	'Norte' 
)
{ after(grammarAccess.getDireccionAccess().getNorteEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDireccionAccess().getSurEnumLiteralDeclaration_1()); }
(	'Sur' 
)
{ after(grammarAccess.getDireccionAccess().getSurEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getDireccionAccess().getEsteEnumLiteralDeclaration_2()); }
(	'Este' 
)
{ after(grammarAccess.getDireccionAccess().getEsteEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getDireccionAccess().getOesteEnumLiteralDeclaration_3()); }
(	'Oeste' 
)
{ after(grammarAccess.getDireccionAccess().getOesteEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Procedure__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__0__Impl
	rule__Procedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }

	'procedure' 

{ after(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__1__Impl
	rule__Procedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
(rule__Procedure__NameAssignment_1)
{ after(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__2__Impl
	rule__Procedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getProcedureAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__3__Impl
	rule__Procedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getCommandsAssignment_3()); }
(rule__Procedure__CommandsAssignment_3)*
{ after(grammarAccess.getProcedureAccess().getCommandsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getProcedureAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Poner__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Poner__Group__0__Impl
	rule__Poner__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Poner__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPonerAccess().getPonerAction_0()); }
(

)
{ after(grammarAccess.getPonerAccess().getPonerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Poner__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Poner__Group__1__Impl
	rule__Poner__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Poner__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPonerAccess().getPonerKeyword_1()); }

	'Poner' 

{ after(grammarAccess.getPonerAccess().getPonerKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Poner__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Poner__Group__2__Impl
	rule__Poner__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Poner__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPonerAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getPonerAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Poner__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Poner__Group__3__Impl
	rule__Poner__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Poner__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPonerAccess().getColorAssignment_3()); }
(rule__Poner__ColorAssignment_3)
{ after(grammarAccess.getPonerAccess().getColorAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Poner__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Poner__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Poner__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPonerAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getPonerAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Mover__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mover__Group__0__Impl
	rule__Mover__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mover__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoverAccess().getMoverAction_0()); }
(

)
{ after(grammarAccess.getMoverAccess().getMoverAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mover__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mover__Group__1__Impl
	rule__Mover__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mover__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoverAccess().getMoverKeyword_1()); }

	'Mover' 

{ after(grammarAccess.getMoverAccess().getMoverKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mover__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mover__Group__2__Impl
	rule__Mover__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mover__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoverAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getMoverAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mover__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mover__Group__3__Impl
	rule__Mover__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mover__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoverAccess().getDirAssignment_3()); }
(rule__Mover__DirAssignment_3)
{ after(grammarAccess.getMoverAccess().getDirAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mover__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mover__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mover__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoverAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMoverAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Model__MainAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainProcedureParserRuleCall_0()); }
	ruleProcedure{ after(grammarAccess.getModelAccess().getMainProcedureParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__CommandsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getCommandsCommandParserRuleCall_3_0()); }
	ruleCommand{ after(grammarAccess.getProcedureAccess().getCommandsCommandParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Poner__ColorAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPonerAccess().getColorColorEnumRuleCall_3_0()); }
	ruleColor{ after(grammarAccess.getPonerAccess().getColorColorEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mover__DirAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMoverAccess().getDirDireccionEnumRuleCall_3_0()); }
	ruleDireccion{ after(grammarAccess.getMoverAccess().getDirDireccionEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


